//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\projects\Viewer\src\Viewer.Query\QueryParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Viewer.Query {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="QueryParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IQueryParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntry([NotNull] QueryParser.EntryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.entry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntry([NotNull] QueryParser.EntryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.queryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryExpression([NotNull] QueryParser.QueryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.queryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryExpression([NotNull] QueryParser.QueryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.intersection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntersection([NotNull] QueryParser.IntersectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.intersection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntersection([NotNull] QueryParser.IntersectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.queryFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryFactor([NotNull] QueryParser.QueryFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.queryFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryFactor([NotNull] QueryParser.QueryFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuery([NotNull] QueryParser.QueryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuery([NotNull] QueryParser.QueryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.unorderedQuery"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnorderedQuery([NotNull] QueryParser.UnorderedQueryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.unorderedQuery"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnorderedQuery([NotNull] QueryParser.UnorderedQueryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.source"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSource([NotNull] QueryParser.SourceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.source"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSource([NotNull] QueryParser.SourceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.optionalWhere"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionalWhere([NotNull] QueryParser.OptionalWhereContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.optionalWhere"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionalWhere([NotNull] QueryParser.OptionalWhereContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.optionalOrderBy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionalOrderBy([NotNull] QueryParser.OptionalOrderByContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.optionalOrderBy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionalOrderBy([NotNull] QueryParser.OptionalOrderByContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.orderByList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrderByList([NotNull] QueryParser.OrderByListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.orderByList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrderByList([NotNull] QueryParser.OrderByListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.orderByKey"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrderByKey([NotNull] QueryParser.OrderByKeyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.orderByKey"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrderByKey([NotNull] QueryParser.OrderByKeyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.optionalGroupBy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionalGroupBy([NotNull] QueryParser.OptionalGroupByContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.optionalGroupBy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionalGroupBy([NotNull] QueryParser.OptionalGroupByContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicate([NotNull] QueryParser.PredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicate([NotNull] QueryParser.PredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.conjunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConjunction([NotNull] QueryParser.ConjunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.conjunction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConjunction([NotNull] QueryParser.ConjunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] QueryParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] QueryParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.comparison"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison([NotNull] QueryParser.ComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.comparison"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison([NotNull] QueryParser.ComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] QueryParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] QueryParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.multiplication"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplication([NotNull] QueryParser.MultiplicationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.multiplication"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplication([NotNull] QueryParser.MultiplicationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] QueryParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] QueryParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] QueryParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] QueryParser.ArgumentListContext context);
}
} // namespace Viewer.Query
