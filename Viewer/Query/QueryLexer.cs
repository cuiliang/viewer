//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Viewer.Query {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class QueryLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, SELECT=3, WHERE=4, PATH_PATTERN=5, ID=6, INT=7, REAL=8, 
		ADD_SUB=9, MULT_DIV=10, REL_OP=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "SELECT", "WHERE", "PATH_PATTERN", "ID", "INT", "REAL", 
		"ADD_SUB", "MULT_DIV", "REL_OP", "WS"
	};


	public QueryLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public QueryLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'SELECT'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "SELECT", "WHERE", "PATH_PATTERN", "ID", "INT", "REAL", 
		"ADD_SUB", "MULT_DIV", "REL_OP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', '\x61', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', '/', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', '\x30', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\x37', '\n', '\a', '\f', '\a', '\xE', 
		'\a', ':', '\v', '\a', '\x3', '\b', '\x6', '\b', '=', '\n', '\b', '\r', 
		'\b', '\xE', '\b', '>', '\x3', '\t', '\x6', '\t', '\x42', '\n', '\t', 
		'\r', '\t', '\xE', '\t', '\x43', '\x3', '\t', '\x3', '\t', '\x6', '\t', 
		'H', '\n', '\t', '\r', '\t', '\xE', '\t', 'I', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', 'Y', '\n', '\f', '\x3', '\r', '\x6', '\r', '\\', '\n', '\r', 
		'\r', '\r', '\xE', '\r', ']', '\x3', '\r', '\x3', '\r', '\x2', '\x2', 
		'\xE', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', 
		'\r', '\x19', '\xE', '\x3', '\x2', '\t', '\x5', '\x2', '\f', '\f', '\xF', 
		'\xF', '$', '$', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '-', '-', '/', '/', '\x4', '\x2', 
		',', ',', '\x31', '\x31', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', 
		'\"', '\x2', 'k', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x1F', '\x3', '\x2', '\x2', '\x2', '\t', '&', 
		'\x3', '\x2', '\x2', '\x2', '\v', ',', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\xF', '<', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x41', '\x3', '\x2', '\x2', '\x2', '\x13', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x15', 'M', '\x3', '\x2', '\x2', '\x2', '\x17', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '[', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\a', '*', '\x2', '\x2', '\x1C', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x1E', '\a', '+', '\x2', '\x2', '\x1E', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', ' ', '\a', 'U', '\x2', '\x2', ' ', '!', '\a', 'G', 
		'\x2', '\x2', '!', '\"', '\a', 'N', '\x2', '\x2', '\"', '#', '\a', 'G', 
		'\x2', '\x2', '#', '$', '\a', '\x45', '\x2', '\x2', '$', '%', '\a', 'V', 
		'\x2', '\x2', '%', '\b', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', 
		'Y', '\x2', '\x2', '\'', '(', '\a', 'J', '\x2', '\x2', '(', ')', '\a', 
		'G', '\x2', '\x2', ')', '*', '\a', 'T', '\x2', '\x2', '*', '+', '\a', 
		'G', '\x2', '\x2', '+', '\n', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', 
		'$', '\x2', '\x2', '-', '/', '\n', '\x2', '\x2', '\x2', '.', '-', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', 
		'$', '\x2', '\x2', '\x33', '\f', '\x3', '\x2', '\x2', '\x2', '\x34', '\x38', 
		'\t', '\x3', '\x2', '\x2', '\x35', '\x37', '\t', '\x4', '\x2', '\x2', 
		'\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\xE', '\x3', '\x2', '\x2', '\x2', 
		':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '=', '\t', '\x5', '\x2', 
		'\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x10', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\t', '\x5', 
		'\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'G', '\a', '\x30', '\x2', '\x2', '\x46', 'H', '\t', 
		'\x5', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 
		'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\t', '\x6', '\x2', '\x2', 'L', '\x14', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\t', '\a', '\x2', '\x2', 'N', '\x16', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'Y', '\a', '?', '\x2', '\x2', 'P', 'Q', '\a', '#', 
		'\x2', '\x2', 'Q', 'Y', '\a', '?', '\x2', '\x2', 'R', 'Y', '\a', '>', 
		'\x2', '\x2', 'S', 'T', '\a', '>', '\x2', '\x2', 'T', 'Y', '\a', '?', 
		'\x2', '\x2', 'U', 'Y', '\a', '@', '\x2', '\x2', 'V', 'W', '\a', '@', 
		'\x2', '\x2', 'W', 'Y', '\a', '?', '\x2', '\x2', 'X', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'P', '\x3', '\x2', '\x2', '\x2', 'X', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'S', '\x3', '\x2', '\x2', '\x2', 'X', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', '\x18', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\\', '\t', '\b', '\x2', '\x2', '[', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', 
		'_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\b', '\r', '\x2', '\x2', '`', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\n', '\x2', '\x30', '\x38', '>', 
		'\x43', 'I', 'X', ']', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Viewer.Query
