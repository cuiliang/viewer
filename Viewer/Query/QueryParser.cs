//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Viewer.Query {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, SELECT=3, WHERE=4, PATH_PATTERN=5, ID=6, INT=7, REAL=8, 
		ADD_SUB=9, MULT_DIV=10, REL_OP=11, WS=12;
	public const int
		RULE_query = 0, RULE_source = 1, RULE_optionalWhere = 2, RULE_comparison = 3, 
		RULE_expression = 4, RULE_multiplication = 5, RULE_factor = 6;
	public static readonly string[] ruleNames = {
		"query", "source", "optionalWhere", "comparison", "expression", "multiplication", 
		"factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'SELECT'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "SELECT", "WHERE", "PATH_PATTERN", "ID", "INT", "REAL", 
		"ADD_SUB", "MULT_DIV", "REL_OP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class QueryContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(QueryParser.SELECT, 0); }
		public SourceContext source() {
			return GetRuleContext<SourceContext>(0);
		}
		public OptionalWhereContext optionalWhere() {
			return GetRuleContext<OptionalWhereContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(QueryParser.Eof, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; Match(SELECT);
				State = 15; source();
				State = 16; optionalWhere();
				State = 17; Match(Eof);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		public ITerminalNode PATH_PATTERN() { return GetToken(QueryParser.PATH_PATTERN, 0); }
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(Context, State);
		EnterRule(_localctx, 2, RULE_source);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PATH_PATTERN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; Match(PATH_PATTERN);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23; Match(T__0);
				State = 24; query();
				State = 25; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalWhereContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(QueryParser.WHERE, 0); }
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public OptionalWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalWhere; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalWhereContext optionalWhere() {
		OptionalWhereContext _localctx = new OptionalWhereContext(Context, State);
		EnterRule(_localctx, 4, RULE_optionalWhere);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; Match(WHERE);
				State = 30; comparison();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode REL_OP() { return GetToken(QueryParser.REL_OP, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 6, RULE_comparison);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; expression(0);
				State = 35; Match(REL_OP);
				State = 36; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public MultiplicationContext multiplication() {
			return GetRuleContext<MultiplicationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ADD_SUB() { return GetToken(QueryParser.ADD_SUB, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 42; multiplication(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 44;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 45; Match(ADD_SUB);
					State = 46; multiplication(0);
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public MultiplicationContext multiplication() {
			return GetRuleContext<MultiplicationContext>(0);
		}
		public ITerminalNode MULT_DIV() { return GetToken(QueryParser.MULT_DIV, 0); }
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		return multiplication(0);
	}

	private MultiplicationContext multiplication(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicationContext _localctx = new MultiplicationContext(Context, _parentState);
		MultiplicationContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_multiplication, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 53; factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multiplication);
					State = 55;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 56; Match(MULT_DIV);
					State = 57; factor();
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode ID() { return GetToken(QueryParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(QueryParser.INT, 0); }
		public ITerminalNode REAL() { return GetToken(QueryParser.REAL, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 12, RULE_factor);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; Match(T__0);
				State = 64; comparison();
				State = 65; Match(T__1);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; Match(ID);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; Match(INT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; Match(REAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 5: return multiplication_sempred((MultiplicationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplication_sempred(MultiplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', 'K', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x17', '\n', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '#', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '*', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x32', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x35', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '=', '\n', '\a', '\f', '\a', '\xE', '\a', '@', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'I', '\n', '\b', '\x3', '\b', '\x2', '\x4', 
		'\n', '\f', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', 
		'\x2', '\x2', 'L', '\x2', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\"', '\x3', '\x2', '\x2', '\x2', '\b', 
		')', '\x3', '\x2', '\x2', '\x2', '\n', '+', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x36', '\x3', '\x2', '\x2', '\x2', '\xE', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x11', '\a', '\x5', '\x2', '\x2', '\x11', '\x12', '\x5', 
		'\x4', '\x3', '\x2', '\x12', '\x13', '\x5', '\x6', '\x4', '\x2', '\x13', 
		'\x14', '\a', '\x2', '\x2', '\x3', '\x14', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x17', '\x3', '\x2', '\x2', '\x2', '\x16', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1E', '\a', '\a', '\x2', 
		'\x2', '\x19', '\x1A', '\a', '\x3', '\x2', '\x2', '\x1A', '\x1B', '\x5', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x4', '\x2', '\x2', '\x1C', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x6', '\x2', '\x2', ' ', '#', 
		'\x5', '\b', '\x5', '\x2', '!', '#', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '\a', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x5', '\n', '\x6', '\x2', 
		'%', '&', '\a', '\r', '\x2', '\x2', '&', '\'', '\x5', '\n', '\x6', '\x2', 
		'\'', '*', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\n', '\x6', '\x2', 
		')', '$', '\x3', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', 
		'*', '\t', '\x3', '\x2', '\x2', '\x2', '+', ',', '\b', '\x6', '\x1', '\x2', 
		',', '-', '\x5', '\f', '\a', '\x2', '-', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\f', '\x4', '\x2', '\x2', '/', '\x30', '\a', '\v', '\x2', 
		'\x2', '\x30', '\x32', '\x5', '\f', '\a', '\x2', '\x31', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\v', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\b', '\a', '\x1', '\x2', '\x37', '\x38', 
		'\x5', '\xE', '\b', '\x2', '\x38', '>', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\f', '\x4', '\x2', '\x2', ':', ';', '\a', '\f', '\x2', '\x2', ';', 
		'=', '\x5', '\xE', '\b', '\x2', '<', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'=', '@', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\r', '\x3', '\x2', '\x2', 
		'\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x3', 
		'\x2', '\x2', '\x42', '\x43', '\x5', '\b', '\x5', '\x2', '\x43', '\x44', 
		'\a', '\x4', '\x2', '\x2', '\x44', 'I', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'I', '\a', '\b', '\x2', '\x2', '\x46', 'I', '\a', '\t', '\x2', '\x2', 
		'G', 'I', '\a', '\n', '\x2', '\x2', 'H', '\x41', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x16', '\x1D', '\"', ')', '\x33', '>', 'H',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Viewer.Query
