<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CacheFilePath" xml:space="preserve">
    <value>%localappdata%/Viewer/cache.db</value>
    <comment>Names between %% will be expanded as environment variables (e.g. %userprofile% is the absolute path to user's profile) </comment>
  </data>
  <data name="SqliteConnectionString" xml:space="preserve">
    <value>Data Source={0};Version=3;Pooling=True;foreign keys=true;recursive_triggers=true</value>
    <comment>{0} is the location of the cache file</comment>
  </data>
  <data name="SqliteInitializationScript" xml:space="preserve">
    <value>/** Attribute cache database structure.
 * We assume following things:
 * (1) file paths as normalized and they use / (forward slash) as directory separator
 * (2) file paths as case INsensitive
 */

/** Tables */

-- files
create table if not exists `files`(
    `id` integer not null,
    `path` text not null unique, -- COLLATE INVARIANT_CULTURE_IGNORE_CASE -- it is assumed to be normalized
    `parent_id` integer,
    -- the following 2 columns are only used for leaf nodes (i.e., files, not directories)
    `last_file_write_time` text, -- the last write time of this file in the file system
    `last_row_access_time` text, -- the last access time of this row entry in the database

    primary key(`id`),
    foreign key(`parent_id`)
        references `files`(`id`)
            on update cascade
            on delete cascade
);

----

-- attributes of files
create table if not exists `attributes`(
    `id` integer not null,
    `name` text not null, -- COLLATE INVARIANT_CULTURE
    `source` integer not null default 0,
    `type` integer not null default 0, -- type as defined in the AttributeType enum
    `value` blob not null,
    `file_id` integer not null,

    primary key(`id`),
    foreign key(`file_id`) 
        references `files`(`id`)
            on update cascade
            on delete cascade
);

----

/** Closure of the tree order relation (the relation: "is ancestor of")
 * We need this table for efficient subtree queries used for query optimizations. While it could 
 * be quite large, its blocking factor is also big and it takes far less space than thumbnails.
 */
create table if not exists `files_closure`(
    `parent_id` integer not null,
    `child_id` integer not null,

	primary key(`parent_id`, `child_id`),
    foreign key(`parent_id`)
        references `files`(`id`)
            on update cascade
            on delete cascade,
    foreign key(`child_id`)
        references `files`(`id`)
            on update cascade
            on delete cascade
) without rowid; -- we want the (parent_id, child_id) index to be the clustered index of this table

----

/** Indexes */

-- index used for random access to files
create unique index if not exists `files_path_index` on `files`(
    `path` asc
);

----

-- index used for random access to custom attribute names (in attribute name suggestion)
create index if not exists `attributes_source_name_index` on `attributes`(
    `source` asc,
    `name` asc
);

----

-- access to the closure table from the other side (e.g., during the `files_closure_after_insert` trigger)
create index if not exists `files_closure_child_id_index` on `files_closure`(
    `child_id` asc
);

----

/** Triggers */

-- this trigger will fix the closure of the tree order relation for every inserted file
create trigger if not exists `files_closure_after_insert`
after insert on `files` 
for each row 
begin 
    -- ensure the relation is reflexive
    insert into files_closure (parent_id, child_id) values (NEW.id, NEW.id); 
    -- ensure the relation is transitive
    insert into files_closure (parent_id, child_id) 
        select parent_id, NEW.id 
        from files_closure 
        where child_id = NEW.parent_id; 
end;

----

/** This will update the closure for all elements on the path to the root 
 * (i.e., every explicit parent_id update has to be done on leaf nodes)
 */
create trigger if not exists `files_closure_after_update`
after update on `files`
for each row 
begin
    -- remove all nodes above it
    delete from files_closure where child_id = NEW.id;
    -- add new nodes above it
    insert into files_closure (parent_id, child_id) 
        select parent_id, NEW.id 
        from files_closure 
        where child_id = NEW.parent_id; 
end;

----

-- this trigger will insert file parent directory to the database if it doesn't exist
-- NOTE: this is a recursive trigger
create trigger if not exists `files_insert_parent_trigger`
after insert on `files`
for each row when (NEW.parent_id is null) and (getParentPath(NEW.path) is not null) 
begin
    insert or ignore into `files`(`path`, `parent_id`) values(getParentPath(NEW.path), null);
    update `files` 
    set `parent_id` = (
        select `id` 
        from `files` 
        where `path` = getParentPath(NEW.path)
    )
    where `id` = NEW.id;
end;</value>
  </data>
</root>