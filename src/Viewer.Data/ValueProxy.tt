<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System.Globalization;

namespace Viewer.Data
{
    <#
    var types = new[] { "IntValue", "RealValue", "StringValue", "DateTimeValue", "ImageValue" };
    foreach (var type in types)
    {
    #>

    public class Formatted<#= type #> : <#= type #>
    {
        private readonly IValueFormatter<Formatted<#= type #>> _formatter;

        public Formatted<#= type #>(<#= type #> value, IValueFormatter<Formatted<#= type #>> formatter) : base(value?.Value)
        {
            _formatter = formatter;
        }

        public override string ToString()
        {
            return _formatter.Format(this);
        }
        
        public override string ToString(CultureInfo culture)
        {
            return _formatter.Format(this, culture);
        }
    }

    <#
    } 
    #>
}