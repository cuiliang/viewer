//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\projects\Viewer\Viewer\Query\Query.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Viewer.Query {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, SELECT=4, WHERE=5, ORDERBY=6, DIRECTION=7, ID=8, 
		INT=9, REAL=10, STRING=11, ADD_SUB=12, MULT_DIV=13, REL_OP=14, WS=15;
	public const int
		RULE_query = 0, RULE_source = 1, RULE_optionalWhere = 2, RULE_optionalOrderBy = 3, 
		RULE_orderByList = 4, RULE_orderByKey = 5, RULE_optionalDirection = 6, 
		RULE_comparison = 7, RULE_expression = 8, RULE_multiplication = 9, RULE_factor = 10, 
		RULE_argumentList = 11;
	public static readonly string[] ruleNames = {
		"query", "source", "optionalWhere", "optionalOrderBy", "orderByList", 
		"orderByKey", "optionalDirection", "comparison", "expression", "multiplication", 
		"factor", "argumentList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'SELECT'", "'WHERE'", "'ORDER BY'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "SELECT", "WHERE", "ORDERBY", "DIRECTION", "ID", 
		"INT", "REAL", "STRING", "ADD_SUB", "MULT_DIV", "REL_OP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class QueryContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(QueryParser.SELECT, 0); }
		public SourceContext source() {
			return GetRuleContext<SourceContext>(0);
		}
		public OptionalWhereContext optionalWhere() {
			return GetRuleContext<OptionalWhereContext>(0);
		}
		public OptionalOrderByContext optionalOrderBy() {
			return GetRuleContext<OptionalOrderByContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(QueryParser.Eof, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(SELECT);
				State = 25; source();
				State = 26; optionalWhere();
				State = 27; optionalOrderBy();
				State = 28; Match(Eof);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(Context, State);
		EnterRule(_localctx, 2, RULE_source);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; Match(STRING);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; Match(T__0);
				State = 35; query();
				State = 36; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalWhereContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(QueryParser.WHERE, 0); }
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public OptionalWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalWhere; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalWhereContext optionalWhere() {
		OptionalWhereContext _localctx = new OptionalWhereContext(Context, State);
		EnterRule(_localctx, 4, RULE_optionalWhere);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; Match(WHERE);
				State = 41; comparison();
				}
				break;
			case Eof:
			case ORDERBY:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalOrderByContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(QueryParser.ORDERBY, 0); }
		public OrderByListContext orderByList() {
			return GetRuleContext<OrderByListContext>(0);
		}
		public OptionalOrderByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalOrderBy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalOrderBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalOrderByContext optionalOrderBy() {
		OptionalOrderByContext _localctx = new OptionalOrderByContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionalOrderBy);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ORDERBY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(ORDERBY);
				State = 46; orderByList();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByListContext : ParserRuleContext {
		public OrderByKeyContext[] orderByKey() {
			return GetRuleContexts<OrderByKeyContext>();
		}
		public OrderByKeyContext orderByKey(int i) {
			return GetRuleContext<OrderByKeyContext>(i);
		}
		public OrderByListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByListContext orderByList() {
		OrderByListContext _localctx = new OrderByListContext(Context, State);
		EnterRule(_localctx, 8, RULE_orderByList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; orderByKey();
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 51; Match(T__2);
				State = 52; orderByKey();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByKeyContext : ParserRuleContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public OptionalDirectionContext optionalDirection() {
			return GetRuleContext<OptionalDirectionContext>(0);
		}
		public OrderByKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByKey; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByKeyContext orderByKey() {
		OrderByKeyContext _localctx = new OrderByKeyContext(Context, State);
		EnterRule(_localctx, 10, RULE_orderByKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; comparison();
			State = 59; optionalDirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalDirectionContext : ParserRuleContext {
		public ITerminalNode DIRECTION() { return GetToken(QueryParser.DIRECTION, 0); }
		public OptionalDirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalDirection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalDirectionContext optionalDirection() {
		OptionalDirectionContext _localctx = new OptionalDirectionContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionalDirection);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIRECTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(DIRECTION);
				}
				break;
			case Eof:
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode REL_OP() { return GetToken(QueryParser.REL_OP, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparison);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; expression(0);
				State = 66; Match(REL_OP);
				State = 67; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public MultiplicationContext multiplication() {
			return GetRuleContext<MultiplicationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ADD_SUB() { return GetToken(QueryParser.ADD_SUB, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 73; multiplication(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 75;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 76; Match(ADD_SUB);
					State = 77; multiplication(0);
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public MultiplicationContext multiplication() {
			return GetRuleContext<MultiplicationContext>(0);
		}
		public ITerminalNode MULT_DIV() { return GetToken(QueryParser.MULT_DIV, 0); }
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		return multiplication(0);
	}

	private MultiplicationContext multiplication(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicationContext _localctx = new MultiplicationContext(Context, _parentState);
		MultiplicationContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_multiplication, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 84; factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multiplication);
					State = 86;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 87; Match(MULT_DIV);
					State = 88; factor();
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode INT() { return GetToken(QueryParser.INT, 0); }
		public ITerminalNode REAL() { return GetToken(QueryParser.REAL, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public ITerminalNode ID() { return GetToken(QueryParser.ID, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 20, RULE_factor);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; Match(T__0);
				State = 95; comparison();
				State = 96; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; Match(INT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99; Match(REAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100; Match(STRING);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 101; Match(ID);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 102; Match(ID);
				State = 103; Match(T__0);
				State = 104; argumentList();
				State = 105; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 22, RULE_argumentList);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case ID:
			case INT:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; comparison();
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 110; Match(T__2);
					State = 111; comparison();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 9: return multiplication_sempred((MultiplicationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplication_sempred(MultiplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '{', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\"', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '.', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x33', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x38', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', ';', '\v', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x42', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'I', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', 'Q', '\n', '\n', '\f', '\n', '\xE', 
		'\n', 'T', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\\', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '_', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'n', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 's', '\n', '\r', '\f', 
		'\r', '\xE', '\r', 'v', '\v', '\r', '\x3', '\r', '\x5', '\r', 'y', '\n', 
		'\r', '\x3', '\r', '\x2', '\x4', '\x12', '\x14', '\xE', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x2', '\x2', '\x2', '~', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x6', '-', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\f', '<', '\x3', '\x2', '\x2', '\x2', '\xE', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'H', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x14', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'm', '\x3', '\x2', '\x2', '\x2', '\x18', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\a', '\x6', '\x2', '\x2', '\x1B', '\x1C', '\x5', 
		'\x4', '\x3', '\x2', '\x1C', '\x1D', '\x5', '\x6', '\x4', '\x2', '\x1D', 
		'\x1E', '\x5', '\b', '\x5', '\x2', '\x1E', '\x1F', '\a', '\x2', '\x2', 
		'\x3', '\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1A', '\x3', '\x2', '\x2', '\x2', '!', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x3', '\x3', '\x2', '\x2', '\x2', '#', ')', 
		'\a', '\r', '\x2', '\x2', '$', '%', '\a', '\x3', '\x2', '\x2', '%', '&', 
		'\x5', '\x2', '\x2', '\x2', '&', '\'', '\a', '\x4', '\x2', '\x2', '\'', 
		')', '\x3', '\x2', '\x2', '\x2', '(', '#', '\x3', '\x2', '\x2', '\x2', 
		'(', '$', '\x3', '\x2', '\x2', '\x2', ')', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\a', '\a', '\x2', '\x2', '+', '.', '\x5', '\x10', '\t', 
		'\x2', ',', '.', '\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', '\x2', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\a', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\a', '\b', '\x2', '\x2', '\x30', '\x33', '\x5', 
		'\n', '\x6', '\x2', '\x31', '\x33', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\t', '\x3', '\x2', '\x2', '\x2', '\x34', '\x39', '\x5', 
		'\f', '\a', '\x2', '\x35', '\x36', '\a', '\x5', '\x2', '\x2', '\x36', 
		'\x38', '\x5', '\f', '\a', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\v', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\x5', '\x10', '\t', '\x2', '=', '>', '\x5', '\xE', '\b', '\x2', 
		'>', '\r', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\a', '\t', '\x2', 
		'\x2', '@', '\x42', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\x12', '\n', '\x2', 
		'\x44', '\x45', '\a', '\x10', '\x2', '\x2', '\x45', '\x46', '\x5', '\x12', 
		'\n', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\x5', 
		'\x12', '\n', '\x2', 'H', '\x43', '\x3', '\x2', '\x2', '\x2', 'H', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'I', '\x11', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\b', '\n', '\x1', '\x2', 'K', 'L', '\x5', '\x14', '\v', '\x2', 'L', 
		'R', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\f', '\x4', '\x2', '\x2', 
		'N', 'O', '\a', '\xE', '\x2', '\x2', 'O', 'Q', '\x5', '\x14', '\v', '\x2', 
		'P', 'M', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', '\x13', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\b', '\v', '\x1', '\x2', 'V', 'W', '\x5', '\x16', '\f', 
		'\x2', 'W', ']', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\f', '\x4', '\x2', 
		'\x2', 'Y', 'Z', '\a', '\xF', '\x2', '\x2', 'Z', '\\', '\x5', '\x16', 
		'\f', '\x2', '[', 'X', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', 
		'\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x15', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\a', '\x3', '\x2', '\x2', '\x61', '\x62', 
		'\x5', '\x10', '\t', '\x2', '\x62', '\x63', '\a', '\x4', '\x2', '\x2', 
		'\x63', 'n', '\x3', '\x2', '\x2', '\x2', '\x64', 'n', '\a', '\v', '\x2', 
		'\x2', '\x65', 'n', '\a', '\f', '\x2', '\x2', '\x66', 'n', '\a', '\r', 
		'\x2', '\x2', 'g', 'n', '\a', '\n', '\x2', '\x2', 'h', 'i', '\a', '\n', 
		'\x2', '\x2', 'i', 'j', '\a', '\x3', '\x2', '\x2', 'j', 'k', '\x5', '\x18', 
		'\r', '\x2', 'k', 'l', '\a', '\x4', '\x2', '\x2', 'l', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'm', '`', '\x3', '\x2', '\x2', '\x2', 'm', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'm', '\x65', '\x3', '\x2', '\x2', '\x2', 'm', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'm', 'g', '\x3', '\x2', '\x2', '\x2', 'm', 
		'h', '\x3', '\x2', '\x2', '\x2', 'n', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'o', 't', '\x5', '\x10', '\t', '\x2', 'p', 'q', '\a', '\x5', '\x2', '\x2', 
		'q', 's', '\x5', '\x10', '\t', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 
		's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'y', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 
		'x', 'o', '\x3', '\x2', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', '\x19', '\x3', '\x2', '\x2', '\x2', '\xE', '!', '(', '-', '\x32', 
		'\x39', '\x41', 'H', 'R', ']', 'm', 't', 'x',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Viewer.Query
